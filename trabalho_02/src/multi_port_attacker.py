"""
Simulador de Ataques DDoS Multi-Porta

Este m√≥dulo implementa um simulador real√≠stico de ataques DDoS que:
- Simula ataques direcionados a portas espec√≠ficas
- Gera tr√°fego normal em outras portas para realismo
- Suporta diferentes intensidades de ataque (low, medium, high)
- Executa m√∫ltiplas threads para simular cen√°rios reais
- Fornece estat√≠sticas detalhadas da simula√ß√£o

O simulador √© usado para:
- Testar efic√°cia do sistema de detec√ß√£o
- Demonstrar funcionamento em tempo real
- Validar respostas autom√°ticas do sistema
- Treinar operadores de seguran√ßa

Autor: Sistema de Seguran√ßa IFB
Data: 2024
"""

import time
import random
import threading
import logging
from datetime import datetime


class MultiPortAttacker:
    """
    Simulador avan√ßado de ataques DDoS em m√∫ltiplas portas.
    
    Esta classe simula cen√°rios real√≠sticos de ataques DDoS onde:
    - Uma porta √© selecionada como alvo principal do ataque
    - Outras portas mant√™m tr√°fego normal para realismo
    - Diferentes intensidades de ataque podem ser configuradas
    - Estat√≠sticas detalhadas s√£o coletadas durante a simula√ß√£o
    
    O simulador utiliza threading para executar m√∫ltiplos tipos de
    tr√°fego simultaneamente, criando um ambiente de teste real√≠stico.
    
    Attributes:
        config (dict): Configura√ß√µes do sistema carregadas do YAML
        monitored_ports (list): Lista de portas configuradas para monitoramento
        attack_port (int): Porta atualmente selecionada para ataque
        logger (logging.Logger): Logger para registrar eventos de simula√ß√£o
        attack_stats (dict): Estat√≠sticas da simula√ß√£o em andamento
    """
    
    def __init__(self, config):
        """
        Inicializa o simulador de ataques DDoS.
        
        Args:
            config (dict): Configura√ß√µes do sistema contendo:
                - detection.ports: Dicion√°rio de portas monitoras
                - Configura√ß√µes de thresholds e detec√ß√£o
                
        Raises:
            KeyError: Se configura√ß√µes necess√°rias n√£o estiverem presentes
        """
        self.config = config
        self.monitored_ports = list(config['detection']['ports'].keys())
        self.attack_port = None
        self.logger = logging.getLogger(__name__)
        
        # Estat√≠sticas detalhadas da simula√ß√£o
        self.attack_stats = {
            'start_time': None,
            'packets_sent': 0,
            'target_port': None,
            'normal_traffic_ports': []
        }
    
    def select_attack_port(self):
        """
        Seleciona aleatoriamente uma porta para ser o alvo do ataque.
        
        Escolhe uma porta dentre as configuradas para monitoramento
        e registra a sele√ß√£o nas estat√≠sticas da simula√ß√£o.
        
        Returns:
            int: N√∫mero da porta selecionada para ataque
            
        Side Effects:
            - Atualiza self.attack_port com a porta selecionada
            - Registra sele√ß√£o no log e estat√≠sticas
        """
        self.attack_port = random.choice(self.monitored_ports)
        self.attack_stats['target_port'] = self.attack_port
        
        port_info = self.config['detection']['ports'][self.attack_port]
        self.logger.info(
            f"üéØ PORTA SELECIONADA PARA ATAQUE: {self.attack_port} "
            f"({port_info['protocol']} - {port_info['description']})"
        )
        
        return self.attack_port
    
    def simulate_normal_traffic(self, port, duration=60):
        """
        Simula tr√°fego normal e leg√≠timo em uma porta espec√≠fica.
        
        Gera padr√£o de tr√°fego que imita uso normal de servi√ßos:
        - Intervalos aleat√≥rios entre requisi√ß√µes (1-5 segundos)
        - Volume baixo e constante de pacotes
        - Sem rajadas ou picos an√¥malos
        
        Este tr√°fego serve como "ru√≠do de fundo" real√≠stico durante
        a simula√ß√£o de ataques, ajudando a validar que o detector
        consegue distinguir entre tr√°fego normal e malicioso.
        
        Args:
            port (int): Porta para simular tr√°fego normal
            duration (int): Dura√ß√£o da simula√ß√£o em segundos (padr√£o: 60)
            
        Side Effects:
            - Gera logs de debug a cada 10 pacotes
            - Atualiza estat√≠sticas internas de tr√°fego
        """
        port_info = self.config['detection']['ports'][port]
        self.logger.info(f"‚úÖ Iniciando tr√°fego normal na porta {port} ({port_info['protocol']})")
        
        start_time = time.time()
        packet_count = 0
        
        while time.time() - start_time < duration:
            # Intervalo aleat√≥rio entre requisi√ß√µes normais (1-5 segundos)
            time.sleep(random.uniform(1, 5))
            
            # Simula requisi√ß√£o normal
            packet_count += 1
            if packet_count % 10 == 0:
                self.logger.debug(f"‚úÖ Tr√°fego normal na porta {port}: {packet_count} pacotes")
        
        self.logger.info(f"‚úÖ Tr√°fego normal finalizado na porta {port}: {packet_count} pacotes")
    
    def simulate_ddos_attack(self, port, duration=60, intensity='high'):
        """
        Simula ataque DDoS direcionado a uma porta espec√≠fica.
        
        Gera padr√£o de tr√°fego malicioso caracter√≠stico de ataques DDoS:
        - Alto volume de pacotes em rajadas
        - Taxa muito superior aos limites normais
        - Intervalos curtos entre pacotes
        - Volume que excede thresholds configurados
        
        Intensidades dispon√≠veis:
        - 'low': 10 pps, excede threshold em ~20 pacotes
        - 'medium': 20 pps, excede threshold em ~50 pacotes  
        - 'high': 100 pps, excede threshold em ~100 pacotes
        
        Args:
            port (int): Porta alvo do ataque
            duration (int): Dura√ß√£o do ataque em segundos (padr√£o: 60)
            intensity (str): Intensidade - 'low', 'medium', 'high' (padr√£o: 'high')
            
        Side Effects:
            - Atualiza estat√≠sticas de ataque em tempo real
            - Gera logs de warning durante execu√ß√£o
            - Calcula e exibe taxa de pacotes por segundo
        """
        port_info = self.config['detection']['ports'][port]
        max_requests = port_info['max_requests']
        
        # Define intensidade do ataque baseada no threshold da porta
        if intensity == 'low':
            interval = 0.1  # 10 pacotes por segundo
            burst_size = max_requests + 20
        elif intensity == 'medium':
            interval = 0.05  # 20 pacotes por segundo
            burst_size = max_requests + 50
        else:  # high
            interval = 0.01  # 100 pacotes por segundo
            burst_size = max_requests + 100
        
        self.logger.warning(
            f"üí• INICIANDO ATAQUE DDoS na porta {port} "
            f"({port_info['protocol']}) - Intensidade: {intensity.upper()}"
        )
        
        start_time = time.time()
        self.attack_stats['start_time'] = start_time
        packet_count = 0
        
        while time.time() - start_time < duration:
            # Envia rajada de pacotes
            for _ in range(burst_size):
                time.sleep(interval)
                packet_count += 1
                self.attack_stats['packets_sent'] = packet_count
                
                # Log a cada 100 pacotes para acompanhar progresso
                if packet_count % 100 == 0:
                    elapsed = time.time() - start_time
                    rate = packet_count / elapsed
                    self.logger.warning(
                        f"üî• Ataque em andamento na porta {port}: "
                        f"{packet_count} pacotes ({rate:.1f} pps)"
                    )
            
            # Pausa curta entre rajadas para simular comportamento real
            time.sleep(random.uniform(0.5, 2))
        
        self.logger.warning(
            f"üí• ATAQUE FINALIZADO na porta {port}: "
            f"{packet_count} pacotes enviados em {duration}s"
        )
    
    def run_simulation(self, duration=120, attack_intensity='high'):
        """
        Executa simula√ß√£o completa de ataque multi-porta.
        
        Coordena uma simula√ß√£o real√≠stica onde:
        1. Uma porta √© selecionada aleatoriamente para ataque DDoS
        2. Todas as outras portas mant√™m tr√°fego normal
        3. M√∫ltiplas threads executam simultaneamente
        4. Estat√≠sticas s√£o coletadas durante toda execu√ß√£o
        5. Resumo detalhado √© exibido ao final
        
        Esta simula√ß√£o permite testar:
        - Capacidade de detec√ß√£o do sistema
        - Precis√£o na identifica√ß√£o de portas atacadas
        - Comportamento com tr√°fego misto (normal + malicioso)
        - Performance sob carga de m√∫ltiplas threads
        
        Args:
            duration (int): Dura√ß√£o total da simula√ß√£o em segundos (padr√£o: 120)
            attack_intensity (str): Intensidade do ataque - 'low'/'medium'/'high' (padr√£o: 'high')
            
        Side Effects:
            - Cria m√∫ltiplas threads para execu√ß√£o paralela
            - Atualiza estat√≠sticas globais da simula√ß√£o
            - Gera logs detalhados de todas as atividades
            - Exibe resumo final com m√©tricas de performance
        """
        self.logger.info("üöÄ INICIANDO SIMULA√á√ÉO MULTI-PORTA")
        
        # Seleciona porta para ataque e define portas normais
        attack_port = self.select_attack_port()
        normal_ports = [p for p in self.monitored_ports if p != attack_port]
        self.attack_stats['normal_traffic_ports'] = normal_ports
        
        self.logger.info(f"üìã Portas com tr√°fego normal: {normal_ports}")
        self.logger.info(f"‚ö° Dura√ß√£o da simula√ß√£o: {duration} segundos")
        
        # Cria threads para cada tipo de tr√°fego
        threads = []
        
        # Thread dedicada para ataque DDoS
        attack_thread = threading.Thread(
            target=self.simulate_ddos_attack,
            args=(attack_port, duration, attack_intensity),
            name=f"Attack-Port-{attack_port}"
        )
        threads.append(attack_thread)
        
        # Threads para tr√°fego normal em cada porta restante
        for port in normal_ports:
            normal_thread = threading.Thread(
                target=self.simulate_normal_traffic,
                args=(port, duration),
                name=f"Normal-Port-{port}"
            )
            threads.append(normal_thread)
        
        # Inicia todas as threads com pequeno delay entre elas
        for thread in threads:
            thread.start()
            time.sleep(0.5)  # Evita sobrecarga inicial
        
        self.logger.info(f"üîÑ {len(threads)} threads de simula√ß√£o iniciadas")
        
        # Aguarda conclus√£o de todas as threads
        for thread in threads:
            thread.join()
        
        self.logger.info("‚úÖ SIMULA√á√ÉO FINALIZADA")
        self._print_attack_summary()
    
    def _print_attack_summary(self):
        """
        Exibe resumo detalhado da simula√ß√£o executada.
        
        Calcula e apresenta m√©tricas importantes da simula√ß√£o:
        - Porta que foi atacada vs portas com tr√°fego normal
        - Total de pacotes maliciosos enviados
        - Dura√ß√£o real da simula√ß√£o
        - Taxa m√©dia de pacotes por segundo
        - Formata√ß√£o visual para f√°cil leitura
        
        Este resumo ajuda na an√°lise de performance e valida√ß√£o
        dos testes executados pelo sistema de detec√ß√£o.
        
        Side Effects:
            - Imprime relat√≥rio formatado no console
            - Calcula m√©tricas baseadas em attack_stats
        """
        if self.attack_stats['start_time']:
            duration = time.time() - self.attack_stats['start_time']
            
            print("\n" + "="*50)
            print("üìä RESUMO DA SIMULA√á√ÉO")
            print("="*50)
            print(f"üéØ Porta atacada: {self.attack_stats['target_port']}")
            print(f"üìã Portas normais: {self.attack_stats['normal_traffic_ports']}")
            print(f"üì¶ Pacotes enviados: {self.attack_stats['packets_sent']}")
            print(f"‚è±Ô∏è Dura√ß√£o: {duration:.1f}s")
            print(f"üìà Taxa m√©dia: {self.attack_stats['packets_sent']/duration:.1f} pps")
            print("="*50 + "\n")
