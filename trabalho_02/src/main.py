"""
Sistema Avan√ßado de Detec√ß√£o DDoS - Ponto de Entrada Principal

Este m√≥dulo cont√©m a classe principal que orquestra todo o sistema de detec√ß√£o DDoS,
coordenando a inicializa√ß√£o, execu√ß√£o e finaliza√ß√£o de todos os componentes:
- Detector de ataques multi-porta
- Gerenciador de portas com iptables
- Sistema de notifica√ß√µes
- Dashboard web em tempo real
- Simulador de ataques para testes

Autor: Sistema de Seguran√ßa IFB
Data: 2024
"""

import logging
import time
import sys
import os
from threading import Thread

# Importa componentes do sistema
from utils import load_configuration, setup_logging, validate_configuration, safe_log_message
from port_manager import PortManager
from multi_port_detector import MultiPortDetector
from notification_system import NotificationSystem
from multi_port_attacker import MultiPortAttacker


class DDosDetectionSystem:
    """
    Classe principal que coordena todo o sistema de detec√ß√£o DDoS.
    
    Esta classe atua como um orquestrador central, gerenciando:
    - Inicializa√ß√£o e configura√ß√£o de todos os componentes
    - Coordena√ß√£o entre detector, gerenciador de portas e notifica√ß√µes
    - Execu√ß√£o do dashboard web em tempo real
    - Simula√ß√£o de ataques para testes e valida√ß√£o
    - Monitoramento cont√≠nuo e relat√≥rios de estat√≠sticas
    - Finaliza√ß√£o limpa do sistema
    
    Attributes:
        config (dict): Configura√ß√µes carregadas do arquivo YAML
        components (dict): Dicion√°rio com todos os componentes do sistema
        logger (logging.Logger): Logger principal do sistema
        dashboard_thread (Thread): Thread do servidor web dashboard
        detector_thread (Thread): Thread do detector de ataques
    """
    
    def __init__(self):
        """
        Inicializa o sistema de detec√ß√£o DDoS.
        
        Prepara todas as estruturas necess√°rias mas n√£o inicia os componentes.
        A inicializa√ß√£o real acontece no m√©todo initialize().
        """
        self.config = None
        self.components = {}
        self.logger = None
        self.dashboard_thread = None
        self.detector_thread = None
    
    def initialize(self):
        """
        Inicializa todos os componentes do sistema de detec√ß√£o DDoS.
        
        Executa uma sequ√™ncia ordenada de inicializa√ß√£o:
        1. Carrega e valida configura√ß√µes do arquivo YAML
        2. Configura sistema de logging centralizado
        3. Inicializa componentes principais (detector, port manager, notifica√ß√µes)
        4. Inicia dashboard web se habilitado
        
        Returns:
            bool: True se inicializa√ß√£o foi bem-sucedida, False caso contr√°rio
            
        Raises:
            Exception: Se houver falha cr√≠tica na inicializa√ß√£o
        """
        print("üöÄ INICIANDO SISTEMA AVAN√áADO DE DETEC√á√ÉO DDoS")
        print("=" * 60)
        
        # Carrega e valida configura√ß√µes
        if not self._load_and_validate_config():
            return False
        
        # Configura sistema de logging
        setup_logging()
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # Inicializa componentes principais
        self._initialize_components()
        
        # Inicializa dashboard se habilitado
        self._initialize_dashboard()
        
        print("‚úÖ Sistema inicializado com sucesso")
        return True
    
    def _load_and_validate_config(self):
        """
        Carrega e valida arquivo de configura√ß√£o YAML.
        
        Tenta carregar o arquivo config.yaml do diret√≥rio atual e do diret√≥rio pai.
        Valida se todas as configura√ß√µes necess√°rias est√£o presentes e corretas.
        
        Returns:
            bool: True se configura√ß√£o foi carregada e validada com sucesso
        """
        # Tenta carregar config.yaml do diret√≥rio atual e do diret√≥rio pai
        config_paths = ['config.yaml', '../config.yaml']
        
        for config_path in config_paths:
            self.config = load_configuration(config_path)
            if self.config:
                break
        
        if not self.config:
            print("‚ùå Falha ao carregar configura√ß√µes")
            return False
        
        if not validate_configuration(self.config):
            print("‚ùå Configura√ß√£o inv√°lida")
            return False
        
        print("‚úÖ Configura√ß√µes validadas com sucesso")
        return True
    
    def _initialize_components(self):
        """
        Inicializa todos os componentes principais do sistema.
        
        Cria inst√¢ncias dos componentes principais na ordem correta:
        1. PortManager: Gerencia bloqueio/desbloqueio de portas via iptables
        2. NotificationSystem: Sistema de alertas multi-canal
        3. MultiPortDetector: Detector principal de ataques DDoS
        4. MultiPortAttacker: Simulador de ataques para testes
        
        Os componentes s√£o interconectados atrav√©s de callbacks e refer√™ncias.
        """
        self.components['port_manager'] = PortManager(self.config)
        self.components['notification_system'] = NotificationSystem(self.config)
        self.components['detector'] = MultiPortDetector(
            self.config,
            self.components['port_manager'],
            self.components['notification_system']
        )
        self.components['attacker'] = MultiPortAttacker(self.config)
        
        print("üîß Componentes inicializados")
    
    def _initialize_dashboard(self):
        """
        Inicializa dashboard web se habilitado na configura√ß√£o.
        
        O dashboard fornece interface web em tempo real para:
        - Monitoramento de ataques detectados
        - Controle manual de portas
        - Visualiza√ß√£o de logs e estat√≠sticas
        - Simula√ß√£o de ataques
        
        Executa em thread separada para n√£o bloquear o sistema principal.
        
        Raises:
            ImportError: Se m√≥dulo dashboard n√£o estiver dispon√≠vel
            Exception: Se houver erro na inicializa√ß√£o do servidor web
        """
        if not self.config['dashboard']['enabled']:
            print("üìä Dashboard desabilitado")
            return
        
        try:
            from dashboard import DashboardServer
            dashboard = DashboardServer(
                self.components['detector'],
                self.components['port_manager']
            )
            
            # Configura argumentos do dashboard
            dashboard_port = self.config['dashboard'].get('port', 5000)
            
            def run_dashboard():
                dashboard.run(host='localhost', port=dashboard_port, debug=False)
            
            self.dashboard_thread = Thread(target=run_dashboard, daemon=True)
            self.dashboard_thread.start()
            print(f"üåê Dashboard iniciado em http://localhost:{dashboard_port}")
            time.sleep(2)  # Aguarda dashboard inicializar
        except ImportError as e:
            print(f"‚ö†Ô∏è Dashboard n√£o dispon√≠vel: {e}")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar dashboard: {e}")
    
    def start_monitoring(self):
        """
        Inicia o monitoramento de rede em thread separada.
        
        Cria e inicia uma thread daemon para executar o detector de ataques.
        A thread daemon garante que o programa possa encerrar cleanamente
        mesmo se o monitoramento estiver ativo.
        
        O detector fica em loop cont√≠nuo analisando pacotes de rede
        e detectando padr√µes de ataques DDoS.
        """
        self.detector_thread = Thread(
            target=self.components['detector'].start_monitoring,
            daemon=True
        )
        self.detector_thread.start()
        print("üîç Monitoramento de rede iniciado")
        time.sleep(3)  # Aguarda detector estar pronto
    
    def run_attack_simulation(self, duration=120, intensity='high'):
        """
        Executa simula√ß√£o de ataque DDoS para testes do sistema.
        
        Utiliza o componente MultiPortAttacker para gerar tr√°fego
        simulado que imita padr√µes de ataques DDoS reais. √ötil para:
        - Validar detec√ß√£o de ataques
        - Testar resposta do sistema
        - Demonstrar funcionalidades
        - Treinar operadores
        
        Args:
            duration (int): Dura√ß√£o da simula√ß√£o em segundos (padr√£o: 120)
            intensity (str): Intensidade do ataque - 'low', 'medium', 'high' (padr√£o: 'high')
            
        Raises:
            KeyboardInterrupt: Se usu√°rio interromper a simula√ß√£o
            Exception: Se houver erro na execu√ß√£o da simula√ß√£o
        """
        self.logger.info(safe_log_message(f"üí• Iniciando simula√ß√£o de ataque (dura√ß√£o: {duration}s)"))
        
        try:
            self.components['attacker'].run_simulation(
                duration=duration,
                attack_intensity=intensity
            )
        except KeyboardInterrupt:
            self.logger.info(safe_log_message("‚èπÔ∏è Simula√ß√£o interrompida pelo usu√°rio"))
    
    def run_monitoring_mode(self):
        """
        Executa sistema em modo monitoramento cont√≠nuo.
        
        Mant√©m o sistema principal em execu√ß√£o, exibindo estat√≠sticas
        periodicamente. O loop principal:
        - Aguarda 10 segundos entre verifica√ß√µes
        - Exibe estat√≠sticas a cada 60 segundos (6 ciclos)
        - Mostra apenas atividade relevante (ataques ou tr√°fego alto)
        - Pode ser interrompido com Ctrl+C
        
        Este √© o modo padr√£o de opera√ß√£o do sistema.
        
        Raises:
            KeyboardInterrupt: Quando usu√°rio pressiona Ctrl+C para encerrar
        """
        print("üîÑ Sistema em modo monitoramento. Pressione Ctrl+C para sair.")
        
        try:
            stats_counter = 0
            while True:
                time.sleep(10)
                stats_counter += 1
                
                # Exibe estat√≠sticas apenas a cada 60 segundos (6 ciclos)
                if stats_counter >= 6:
                    stats = self.components['detector'].get_statistics()
                    if stats.get('active_attacks', 0) > 0 or stats.get('total_packets', 0) > 100:
                        print(f"üìä Atividade: {stats.get('total_packets', 0)} pacotes, {stats.get('active_attacks', 0)} ataques")
                    stats_counter = 0
                    
        except KeyboardInterrupt:
            print("üõë Encerrando sistema...")
    
    def shutdown(self):
        """
        Finaliza o sistema de forma limpa e controlada.
        
        Executa procedimentos de limpeza e finaliza√ß√£o:
        - Registra evento de finaliza√ß√£o no log
        - Permite extens√£o futura para limpeza de recursos
        - Exibe mensagem de confirma√ß√£o de encerramento
        
        Este m√©todo √© chamado automaticamente no bloco finally
        da fun√ß√£o main para garantir finaliza√ß√£o limpa mesmo
        em caso de exce√ß√µes.
        """
        self.logger.info(safe_log_message("üîÑ Finalizando sistema..."))
        # Aqui poderia implementar limpeza adicional se necess√°rio
        print("\n" + "=" * 60)
        print("‚úÖ SISTEMA FINALIZADO COM SUCESSO")


def main():
    """
    Fun√ß√£o principal da aplica√ß√£o - ponto de entrada do sistema.
    
    Coordena a execu√ß√£o completa do sistema de detec√ß√£o DDoS:
    1. Inicializa o sistema e todos seus componentes
    2. Inicia monitoramento de rede em background
    3. Ativa dashboard web para interface do usu√°rio
    4. Mant√©m sistema em execu√ß√£o cont√≠nua
    5. Garante finaliza√ß√£o limpa em caso de erro ou interrup√ß√£o
    
    Returns:
        int: C√≥digo de sa√≠da (0 = sucesso, 1 = erro)
        
    Raises:
        Exception: Captura e trata qualquer erro cr√≠tico do sistema
    """
    print("üöÄ INICIANDO SISTEMA AVAN√áADO DE DETEC√á√ÉO DDoS")
    print("=" * 60)
    
    # Inicializa sistema
    system = DDosDetectionSystem()
    
    if not system.initialize():
        print("‚ùå Falha na inicializa√ß√£o do sistema")
        return 1
    
    try:
        # Inicia monitoramento em thread separada
        system.start_monitoring()
        
        # Exibe informa√ß√µes do sistema
        dashboard_port = system.config['dashboard'].get('port', 5000)
        print(f"üåê Dashboard dispon√≠vel em: http://localhost:{dashboard_port}")
        print("üîç Sistema de detec√ß√£o ativo")
        print("üí° Pressione Ctrl+C para encerrar o sistema")
        print("=" * 60)
        
        # Mant√©m o sistema rodando
        system.run_monitoring_mode()
        
    except Exception as e:
        system.logger.error(f"‚ùå Erro cr√≠tico: {e}")
        return 1
    finally:
        system.shutdown()
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
